export const [convertMTDToSysEx, convertCM6ToSysEx] = ['MTD', 'CM6'].map((kind) => {
	const pos = {
		MTD: {
			la: {
				SystemArea:      0x0080,
				PatchTempArea:   0x00a0,
				RhythmSetupTemp: 0x0130,
				TimbreTempArea:  0x0230,
				PatchMemory:     0x09e0,
				UserPatch:       0x0de0,	// Only for MTD
				TimbreMemory:    0x0fe0,
			},
			totalSize: 0x4fe0,
		},
		CM6: {
			la: {
				SystemArea:       0x0080,
				PatchTempArea:    0x00a0,
				RhythmSetupTemp:  0x0130,
				RhythmSetupTemp2: 0x0230,	// Only for CM6
				TimbreTempArea:   0x0284,
				PatchMemory:      0x0a34,
				TimbreMemory:     0x0e34,
			},
			pcm: {
				PatchTempArea: 0x4e34,
				PatchMemory:   0x4eb2,
				SystemArea:    0x5832,
			},
			totalSize: 0x5843,
		},
	}[kind];

	const makeSysExMTCM = (bytes, addrH, addrM, addrL) => makeSysEx(bytes, 0x16, addrH, addrM, addrL);

	return (buf) => {
		// Checks the file header.
		console.assert(pos.totalSize);
		if (!buf || !buf.length || buf.length < pos.totalSize ||
		    !String.fromCharCode(...buf.slice(0x0000, 0x000d)).startsWith('COME ON MUSIC') ||
		    !String.fromCharCode(...buf.slice(0x0010, 0x0012)).startsWith('R ')) {
			return null;
		}
		const idStr = String.fromCharCode(...buf.slice(0x0012, 0x001a));
		if (!idStr.startsWith('MT-32') && !idStr.startsWith('CM-64')) {
			return null;
		}

		const sysExs = [];

		// [LA SOUND PART]
		console.assert(pos.la);

		// System Area
		sysExs.push(makeSysExMTCM(buf.slice(pos.la.SystemArea, pos.la.SystemArea + 0x17), 0x10, 0x00, 0x00));

		// Timbre Memory (#1 - #64)
		for (let i = 0; i < 64; i++) {
			const index = pos.la.TimbreMemory + i * 0x100;
			sysExs.push(makeSysExMTCM(buf.slice(index, index + 0xf6), 0x08, i * 2, 0x00));
		}

		// Rhythm Setup Temporary Area
		sysExs.push(makeSysExMTCM(buf.slice(pos.la.RhythmSetupTemp, pos.la.RhythmSetupTemp + 0x4 * 64), 0x03, 0x01, 0x10));	// #24 - #87
		if (pos.la.RhythmSetupTemp2) {
			sysExs.push(makeSysExMTCM(buf.slice(pos.la.RhythmSetupTemp2, pos.la.RhythmSetupTemp2 + 0x4 * 21), 0x03, 0x03, 0x10));	// #88 - #108
		}

		// Patch Temporary Area
		sysExs.push(makeSysExMTCM(buf.slice(pos.la.PatchTempArea, pos.la.PatchTempArea + 0x10 * 9), 0x03, 0x00, 0x00));

		// Timbre Temporary Area
		for (let i = 0; i < 8; i++) {
			const addr = i * 0xf6;	// 0xf6: 0x0e + 0x3a * 4
			const index = pos.la.TimbreTempArea + addr;
			sysExs.push(makeSysExMTCM(buf.slice(index, index + 0xf6), 0x04, addr >> 7, addr & 0x7f));
		}

		// Patch Memory (#1 - #128)
		for (let i = 0; i < 8; i++) {
			const index = pos.la.PatchMemory + i * 0x8 * 16;
			sysExs.push(makeSysExMTCM(buf.slice(index, index + 0x8 * 16), 0x05, i, 0x00));
		}

		// User Patch (Only for MTD)
		if (pos.la.UserPatch) {
			for (let i = 0; i < 4; i++) {
				const index = pos.la.UserPatch + i * 0x8 * 16;
				sysExs.push(makeSysExMTCM(buf.slice(index, index + 0x8 * 16), 0x05, i, 0x00));
			}
		}

		// [PCM SOUND PART]
		if (pos.pcm) {
			// Patch Temporary Area
			sysExs.push(makeSysExMTCM(buf.slice(pos.pcm.PatchTempArea, pos.pcm.PatchTempArea + 0x15 * 6), 0x50, 0x00, 0x00));

			// Patch Memory (#1 - #128)
			for (let i = 0; i < 16; i++) {
				const addr = i * 0x13 * 8;
				const index = pos.pcm.PatchMemory + addr;
				sysExs.push(makeSysExMTCM(buf.slice(index, index + 0x13 * 8), 0x51, addr >> 7, addr & 0x7f));
			}

			// System Area
			sysExs.push(makeSysExMTCM(buf.slice(pos.pcm.SystemArea, pos.pcm.SystemArea + 0x11), 0x52, 0x00, 0x00));
		}

		console.assert(sysExs.every((e) => e.length <= 256 + 10), 'Too long SysEx', {sysExs});
		return sysExs;
	};
});

export function convertGSDToSysEx(buf) {
	// Checks the file header.
	if (!buf || !buf.length || buf.length < 0x0a71 ||
	    !String.fromCharCode(...buf.slice(0x0000, 0x000d)).startsWith('COME ON MUSIC') ||
	    !String.fromCharCode(...buf.slice(0x000e, 0x001c)).startsWith('GS CONTROL 1.0')) {
		return null;
	}

	const makeSysExGS = (bytes, addrH, addrM, addrL) => makeSysEx(bytes, 0x42, addrH, addrM, addrL);
	const sysExs = [];

	// Master Tune
	sysExs.push(makeSysExGS(buf.slice(0x0020, 0x0024), 0x40, 0x00, 0x00));

	// Master Volume, Master Key Shift, and Master Panpot
	for (let i = 0; i < 3; i++) {
		sysExs.push(makeSysExGS([buf[0x0024 + i]], 0x40, 0x00, 0x04 + i));
	}

	// Reverb
	for (let i = 0; i < 7; i++) {
		sysExs.push(makeSysExGS([buf[0x0027 + i]], 0x40, 0x01, 0x30 + i));
	}

	// Chorus
	for (let i = 0; i < 8; i++) {
		sysExs.push(makeSysExGS([buf[0x002e + i]], 0x40, 0x01, 0x38 + i));
	}

	// Voice Reserve
	sysExs.push(makeSysExGS([0x04f9, 0x00af, 0x0129, 0x01a3, 0x021d, 0x0297, 0x0311, 0x038b, 0x0405, 0x047f, 0x0573, 0x05ed, 0x0667, 0x06e1, 0x075b, 0x07d5].map((e) => buf[e]), 0x40, 0x01, 0x10));

	// Patch Parameter
	for (let i = 0; i < 16; i++) {
		const index = 0x0036 + i * 0x7a;
		const bytes = buf.slice(index, index + 0x7a);
		const addr = 0x90 + 0xe0 * [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15][i];
		sysExs.push(...makeSysExsForPatch(bytes, 0x48, addr >> 7, addr & 0x7f));
	}

	// Drum Setup Parameter
	for (let i = 0; i < 2; i++) {
		const index = 0x07d6 + i * 0x148;
		const bytes = buf.slice(index, index + 0x148);
		const zeroes = new Array(128).fill(0);
		const [level, panpot, reverb, chorus] = bytes.reduce((p, c, i) => {
			p[i % 4][27 + Math.trunc(i / 4)] = c;
			return p;
		}, [[...zeroes], [...zeroes], [...zeroes], [...zeroes]]);

		sysExs.push(makeSysExGS(nibblize(...level.slice(0, 64)),  0x49, 0x02 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...level.slice(64)),     0x49, 0x03 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...panpot.slice(0, 64)), 0x49, 0x06 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...panpot.slice(64)),    0x49, 0x07 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...reverb.slice(0, 64)), 0x49, 0x08 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...reverb.slice(64)),    0x49, 0x09 + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...chorus.slice(0, 64)), 0x49, 0x0a + i * 0x10, 0x00));
		sysExs.push(makeSysExGS(nibblize(...chorus.slice(64)),    0x49, 0x0b + i * 0x10, 0x00));
	}

	// Master Fine Tune and Master Course Tuning
	// (Needed to add universal SysEx?)

	console.assert(sysExs.every((e) => e.length <= 256 + 10), 'Too long SysEx', {sysExs});
	return sysExs;

	function nibblize(...values) {
		return values.reduce((p, c) => {
			p.push((c >> 4) & 0x0f, c & 0x0f);
			return p;
		}, []);
	}

	function makeSysExsForPatch(bytes, addrH, addrM, addrL) {
		console.assert([addrH, addrM, addrL].every((e) => (0x00 <= e && e < 0x80)), 'Invalid address', {addrH, addrM, addrL});

		const nibbles = [];

		// [0-3] Tone Number (Bank LSB & Program Change)
		nibbles.push(...nibblize(bytes[0x00], bytes[0x01]));
		console.assert(nibbles.length === 4, {nibbles});

		// [4-7] Rx. parameters
		nibbles.push(...bytes.slice(0x03, 0x13).reduce((p, c, i) => {
			const bit = c & 0x01;
			if (i % 4 === 0) {
				p.push(bit << 3);
			} else {
				p[p.length - 1] |= bit << (3 - i % 4);
			}
			return p;
		}, []));
		console.assert(nibbles.length === 8, {nibbles});

		// [8-9] MIDI Ch.
		nibbles.push(...nibblize(bytes[0x02]));
		console.assert(nibbles.length === 10, {nibbles});

		// [10-11] MONO/POLY Mode, Assign Mode, and Use For Rhythm Part
		nibbles.push(((bytes[0x13] & 0x01) << 3) | ((bytes[0x15] & 0x03) << 1) | ((bytes[0x15] > 0) ? 0x01 : 0x00), bytes[0x14] & 0x03);
		console.assert(nibbles.length === 12, {nibbles});

		// [12-15] Pitch Key Shift and Pitch Offset Fine
		nibbles.push(...nibblize(bytes[0x16]), bytes[0x17] & 0x0f, bytes[0x18] & 0x0f);
		console.assert(nibbles.length === 16, {nibbles});

		// [16-27] Part Level, Part Panpot, Velocity Sense Offset, Velocity Sense Depth, Key Range Low, and Key Range High
		nibbles.push(...nibblize(bytes[0x19]), ...nibblize(bytes[0x1c]), ...nibblize(bytes[0x1b]), ...nibblize(bytes[0x1a]), ...nibblize(bytes[0x1d]), ...nibblize(bytes[0x1e]));
		console.assert(nibbles.length === 28, {nibbles});

		// [28-47] Chorus Send Depth, Reverb Send Depth, and Tone Modify 1-8
		nibbles.push(...nibblize(...bytes.slice(0x21, 0x2b)));
		console.assert(nibbles.length === 48, {nibbles});

		// [48-51] Zero
		nibbles.push(0, 0, 0, 0);
		console.assert(nibbles.length === 52, {nibbles});

		// [52-75] Scale Tuning C to B
		nibbles.push(...nibblize(...bytes.slice(0x2b, 0x37)));
		console.assert(nibbles.length === 76, {nibbles});

		// [76-79] CC1/CC2 Controller Number
		nibbles.push(...nibblize(...bytes.slice(0x1f, 0x21)));
		console.assert(nibbles.length === 80, {nibbles});

		// [80-223] Destination Controllers
		for (let i = 0; i < 6; i++) {
			const index = 0x37 + i * 11;
			nibbles.push(...nibblize(...bytes.slice(index, index + 3)), 0, 0, ...nibblize(...bytes.slice(index + 3, index + 11)));
		}
		console.assert(nibbles.length === 224, {nibbles});
		console.assert(nibbles.every((e) => (0x0 <= e && e < 0x10)), 'Invalid SysEx nibble', {nibbles});

		// Divides the whole data by 2 packets.
		return [0, 1].map((i) => makeSysExGS(nibbles.slice(i * 128, (i + 1) * 128), addrH, addrM + i, addrL));
	}
}

function makeSysEx(bytes, modelId, addrH, addrM, addrL) {
	console.assert([modelId, addrH, addrM, addrL].every((e) => (0x00 <= e && e < 0x80)), 'Invalid address', {addrH, addrM, addrL});
	const sysEx = [0xf0, 0x41, 0x10, modelId, 0x12, addrH, addrM, addrL, ...bytes, -1, 0xf7];
	sysEx[sysEx.length - 2] = checkSum(sysEx.slice(5, -2));
	return sysEx;
}

function checkSum(bytes) {
	console.assert(bytes && bytes.length, 'Invalid argument', {bytes});
	const sum = bytes.reduce((p, c) => p + c, 0);
	return (0x80 - (sum & 0x7f)) & 0x7f;
}

const initialValues = {
	0x16: {
		0x03: [
			// Patch Temporary Area
			0x01, 0x04, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x07, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 1
			0x00, 0x30, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x08, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 2
			0x01, 0x1f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x07, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 3
			0x01, 0x0e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x08, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 4
			0x00, 0x29, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x04, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 5
			0x00, 0x03, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x0a, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 6
			0x01, 0x2e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 7
			0x01, 0x3a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x0e, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Part 8
			0x00, 0x00, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00, 0x50, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,	// Rhythm Part

			// Rhythm Setup Temporary Area
			0x7f, 0x00, 0x07, 0x00,	// Note #24
			0x7f, 0x00, 0x07, 0x00,	// Note #25
			0x7f, 0x00, 0x07, 0x00,	// Note #26
			0x7f, 0x00, 0x07, 0x00,	// Note #27
			0x7f, 0x00, 0x07, 0x00,	// Note #28
			0x7f, 0x00, 0x07, 0x00,	// Note #29
			0x7f, 0x00, 0x07, 0x00,	// Note #30
			0x7f, 0x00, 0x07, 0x00,	// Note #31
			0x7f, 0x00, 0x07, 0x00,	// Note #32
			0x7f, 0x00, 0x07, 0x00,	// Note #33
			0x7f, 0x00, 0x07, 0x00,	// Note #34
			0x40, 0x64, 0x07, 0x01,	// Note #35
			0x40, 0x64, 0x07, 0x01,	// Note #36
			0x4a, 0x64, 0x06, 0x01,	// Note #37
			0x41, 0x64, 0x07, 0x01,	// Note #38
			0x4b, 0x64, 0x08, 0x01,	// Note #39
			0x45, 0x64, 0x06, 0x01,	// Note #40
			0x44, 0x64, 0x0b, 0x01,	// Note #41
			0x46, 0x64, 0x06, 0x01,	// Note #42
			0x44, 0x64, 0x0b, 0x01,	// Note #43
			0x5d, 0x64, 0x06, 0x01,	// Note #44
			0x43, 0x64, 0x08, 0x01,	// Note #45
			0x47, 0x64, 0x06, 0x01,	// Note #46
			0x43, 0x64, 0x08, 0x01,	// Note #47
			0x42, 0x64, 0x03, 0x01,	// Note #48
			0x48, 0x64, 0x06, 0x01,	// Note #49
			0x42, 0x64, 0x03, 0x01,	// Note #50
			0x49, 0x64, 0x08, 0x01,	// Note #51
			0x7f, 0x00, 0x07, 0x00,	// Note #52
			0x7f, 0x00, 0x07, 0x00,	// Note #53
			0x56, 0x64, 0x09, 0x01,	// Note #54
			0x7f, 0x00, 0x07, 0x00,	// Note #55
			0x4c, 0x64, 0x07, 0x01,	// Note #56
			0x7f, 0x00, 0x07, 0x00,	// Note #57
			0x7f, 0x00, 0x07, 0x00,	// Note #58
			0x7f, 0x00, 0x07, 0x00,	// Note #59
			0x52, 0x64, 0x02, 0x01,	// Note #60
			0x53, 0x64, 0x04, 0x01,	// Note #61
			0x4d, 0x64, 0x08, 0x01,	// Note #62
			0x4e, 0x64, 0x09, 0x01,	// Note #63
			0x4f, 0x64, 0x0a, 0x01,	// Note #64
			0x50, 0x64, 0x07, 0x01,	// Note #65
			0x51, 0x64, 0x05, 0x01,	// Note #66
			0x54, 0x64, 0x02, 0x01,	// Note #67
			0x55, 0x64, 0x02, 0x01,	// Note #68
			0x5b, 0x64, 0x09, 0x01,	// Note #69
			0x58, 0x64, 0x04, 0x01,	// Note #70
			0x5a, 0x64, 0x09, 0x01,	// Note #71
			0x59, 0x64, 0x09, 0x01,	// Note #72
			0x5c, 0x64, 0x0a, 0x01,	// Note #73
			0x7f, 0x00, 0x07, 0x00,	// Note #74
			0x57, 0x64, 0x0c, 0x01,	// Note #75
			0x5e, 0x64, 0x07, 0x01,	// Note #76
			0x5f, 0x64, 0x07, 0x01,	// Note #77
			0x60, 0x64, 0x07, 0x01,	// Note #78
			0x61, 0x64, 0x07, 0x01,	// Note #79
			0x62, 0x64, 0x07, 0x01,	// Note #80
			0x63, 0x64, 0x07, 0x01,	// Note #81
			0x64, 0x64, 0x07, 0x01,	// Note #82
			0x65, 0x64, 0x07, 0x01,	// Note #83
			0x66, 0x64, 0x07, 0x01,	// Note #84
			0x67, 0x64, 0x07, 0x01,	// Note #85
			0x68, 0x64, 0x07, 0x01,	// Note #86
			0x69, 0x64, 0x07, 0x01,	// Note #87
			0x6a, 0x64, 0x07, 0x01,	// Note #88
			0x6b, 0x64, 0x07, 0x01,	// Note #89
			0x6c, 0x64, 0x07, 0x01,	// Note #90
			0x6d, 0x64, 0x07, 0x01,	// Note #91
			0x6e, 0x64, 0x07, 0x01,	// Note #92
			0x6f, 0x64, 0x07, 0x01,	// Note #93
			0x70, 0x64, 0x07, 0x01,	// Note #94
			0x71, 0x64, 0x07, 0x01,	// Note #95
			0x72, 0x64, 0x07, 0x01,	// Note #96
			0x73, 0x64, 0x07, 0x01,	// Note #97
			0x74, 0x64, 0x07, 0x01,	// Note #98
			0x75, 0x64, 0x07, 0x01,	// Note #99
			0x76, 0x64, 0x07, 0x01,	// Note #100
			0x77, 0x64, 0x07, 0x01,	// Note #101
			0x78, 0x64, 0x07, 0x01,	// Note #102
			0x79, 0x64, 0x07, 0x01,	// Note #103
			0x7a, 0x64, 0x07, 0x01,	// Note #104
			0x7b, 0x64, 0x07, 0x01,	// Note #105
			0x7c, 0x64, 0x07, 0x01,	// Note #106
			0x7d, 0x64, 0x07, 0x01,	// Note #107
			0x7e, 0x64, 0x07, 0x01,	// Note #108
		],
		0x04: [
			// [Timbre Temporary Area (Part 1)]
			// Common Parameter
			...'Slap Bass1'.split('').map((ch) => ch.charCodeAt()), 0x05, 0x00, 0x07, 0x00,
			// Partial Parameter (for Partial #1)
			0x24, 0x32, 0x10, 0x01, 0x00, 0x24, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x0f, 0x0c, 0x12, 0x00, 0x15, 0x23, 0x2c, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x4b, 0x50, 0x06, 0x0f, 0x0c,
			0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x1e, 0x64, 0x00, 0x00, 0x00,
			// Partial Parameter (for Partial #2)
			0x24, 0x26, 0x10, 0x01, 0x00, 0x25, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x0d, 0x0c, 0x12, 0x00, 0x15, 0x25, 0x2c, 0x32, 0x32,
			0x40, 0x00, 0x38,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x4b, 0x43, 0x04, 0x0f, 0x0c,
			0x00, 0x00, 0x00, 0x3b, 0x4e, 0x64, 0x1e, 0x64, 0x50, 0x37, 0x00,
			// Partial Parameter (for Partial #3)
			0x24, 0x37, 0x10, 0x01, 0x01, 0x00, 0x26, 0x07,
			0x04, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x1b, 0x27, 0x2f, 0x32, 0x32,
			0x37, 0x19, 0x26,
			0x28, 0x14, 0x07, 0x2e, 0x07,
			0x64, 0x19, 0x00, 0x00, 0x00, 0x2d, 0x50, 0x5e, 0x1c, 0x64, 0x55, 0x30, 0x1a,
			0x50, 0x4b, 0x5b, 0x0c, 0x0f, 0x0c,
			0x00, 0x00, 0x00, 0x3b, 0x3b, 0x64, 0x1e, 0x64, 0x50, 0x37, 0x00,
			// Partial Parameter (for Partial #4)
			0x24, 0x37, 0x10, 0x01, 0x01, 0x00, 0x26, 0x07,
			0x04, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x1b, 0x27, 0x2f, 0x32, 0x32,
			0x37, 0x19, 0x26,
			0x28, 0x14, 0x07, 0x2e, 0x07,
			0x64, 0x19, 0x00, 0x00, 0x00, 0x2d, 0x50, 0x5e, 0x1c, 0x64, 0x55, 0x30, 0x1a,
			0x50, 0x4b, 0x5b, 0x0c, 0x0f, 0x0c,
			0x00, 0x00, 0x00, 0x3b, 0x3b, 0x64, 0x1e, 0x64, 0x50, 0x37, 0x00,

			// [Timbre Temporary Area (Part 2)]
			// Common Parameter
			...'Str Sect 1'.split('').map((ch) => ch.charCodeAt()), 0x07, 0x05, 0x0f, 0x00,
			// Partial Parameter (for Partial #1)
			0x24, 0x2b, 0x10, 0x01, 0x00, 0x00, 0x59, 0x07,
			0x07, 0x01, 0x03, 0x07, 0x0f, 0x18, 0x00, 0x30, 0x63, 0x29, 0x32, 0x32,
			0x43, 0x1c, 0x2e,
			0x4b, 0x00, 0x09, 0x1b, 0x0a,
			0x1e, 0x14, 0x00, 0x00, 0x10, 0x18, 0x18, 0x50, 0x58, 0x64, 0x60, 0x5a, 0x12,
			0x46, 0x50, 0x5b, 0x0c, 0x1b, 0x0c,
			0x04, 0x01, 0x10, 0x0a, 0x12, 0x18, 0x3c, 0x38, 0x50, 0x60, 0x64,
			// Partial Parameter (for Partial #2)
			0x24, 0x39, 0x10, 0x01, 0x00, 0x00, 0x50, 0x07,
			0x07, 0x01, 0x04, 0x06, 0x11, 0x09, 0x00, 0x31, 0x64, 0x2b, 0x32, 0x32,
			0x3f, 0x1c, 0x29,
			0x55, 0x00, 0x09, 0x27, 0x0a,
			0x0f, 0x14, 0x00, 0x00, 0x12, 0x20, 0x1c, 0x59, 0x58, 0x55, 0x44, 0x1a, 0x12,
			0x46, 0x50, 0x70, 0x09, 0x5b, 0x0c,
			0x04, 0x01, 0x0c, 0x0e, 0x12, 0x1c, 0x3c, 0x30, 0x4a, 0x5a, 0x64,
			// Partial Parameter (for Partial #3)
			0x24, 0x32, 0x10, 0x01, 0x00, 0x2c, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5a, 0x46, 0x4f, 0x04, 0x41, 0x0a,
			0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3d, 0x64, 0x00, 0x00, 0x00,
			// Partial Parameter (for Partial #4)
			0x24, 0x54, 0x10, 0x01, 0x00, 0x2d, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5c, 0x5a, 0x2b, 0x08, 0x5b, 0x0c,
			0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x64, 0x00, 0x00, 0x00,

			// [Timbre Temporary Area (Part 3)]
			// Common Parameter
			...'Brs Sect 1'.split('').map((ch) => ch.charCodeAt()), 0x05, 0x07, 0x0f, 0x00,
			// Partial Parameter (for Partial #1)
			0x30, 0x32, 0x10, 0x01, 0x00, 0x17, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5f, 0x48, 0x7f, 0x06, 0x24, 0x05,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x64, 0x64, 0x64, 0x64,
			// Partial Parameter (for Partial #2)
			0x24, 0x32, 0x10, 0x01, 0x00, 0x1d, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x60, 0x48, 0x7f, 0x06, 0x24, 0x0c,
			0x00, 0x01, 0x00, 0x00, 0x1d, 0x2e, 0x28, 0x64, 0x64, 0x64, 0x00,
			// Partial Parameter (for Partial #3)
			0x30, 0x32, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07,
			0x06, 0x03, 0x00, 0x0b, 0x21, 0x23, 0x00, 0x13, 0x22, 0x32, 0x32, 0x32,
			0x3f, 0x0f, 0x28,
			0x46, 0x08, 0x09, 0x24, 0x09,
			0x37, 0x3a, 0x00, 0x02, 0x13, 0x01, 0x08, 0x1f, 0x64, 0x56, 0x3c, 0x57, 0x48,
			0x4e, 0x44, 0x7f, 0x00, 0x1b, 0x0c,
			0x01, 0x02, 0x06, 0x08, 0x04, 0x17, 0x14, 0x4b, 0x2c, 0x64, 0x5d,
			// Partial Parameter (for Partial #4)
			0x24, 0x2f, 0x10, 0x01, 0x00, 0x00, 0x48, 0x07,
			0x06, 0x03, 0x00, 0x0b, 0x0f, 0x18, 0x00, 0x13, 0x22, 0x2b, 0x32, 0x32,
			0x3d, 0x0f, 0x28,
			0x46, 0x08, 0x09, 0x24, 0x09,
			0x37, 0x3a, 0x00, 0x02, 0x18, 0x01, 0x08, 0x1f, 0x64, 0x56, 0x3c, 0x57, 0x48,
			0x4e, 0x44, 0x7f, 0x00, 0x1b, 0x0c,
			0x01, 0x02, 0x0b, 0x08, 0x0d, 0x17, 0x14, 0x4b, 0x2c, 0x64, 0x5d,

			// [Timbre Temporary Area (Part 4)]
			// Common Parameter
			...'Sax 1     '.split('').map((ch) => ch.charCodeAt()), 0x01, 0x05, 0x0f, 0x00,
			// Partial Parameter (for Partial #1)
			0x24, 0x32, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07,
			0x07, 0x03, 0x04, 0x15, 0x15, 0x27, 0x00, 0x32, 0x27, 0x32, 0x32, 0x32,
			0x40, 0x1a, 0x30,
			0x58, 0x11, 0x07, 0x21, 0x09,
			0x30, 0x47, 0x00, 0x00, 0x03, 0x11, 0x19, 0x3e, 0x2d, 0x4c, 0x37, 0x29, 0x1d,
			0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c,
			0x03, 0x00, 0x0b, 0x0e, 0x0c, 0x16, 0x1e, 0x2f, 0x42, 0x60, 0x64,
			// Partial Parameter (for Partial #2)
			0x37, 0x31, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x0a, 0x14, 0x32, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x40, 0x21, 0x2e,
			0x64, 0x00, 0x06, 0x26, 0x0a,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x64, 0x73, 0x00, 0x24, 0x08,
			0x02, 0x00, 0x0a, 0x1a, 0x14, 0x3c, 0x11, 0x3e, 0x64, 0x59, 0x45,
			// Partial Parameter (for Partial #3)
			0x24, 0x00, 0x10, 0x01, 0x00, 0x1e, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x0b, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x50, 0x50, 0x00, 0x1b, 0x0c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x64, 0x64, 0x64, 0x64,
			// Partial Parameter (for Partial #4)
			0x24, 0x38, 0x10, 0x01, 0x00, 0x1d, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x0b, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x50, 0x6f, 0x05, 0x1b, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x64, 0x64, 0x64, 0x64,

			// [Timbre Temporary Area (Part 5)]
			// Common Parameter
			...'Ice Rain  '.split('').map((ch) => ch.charCodeAt()), 0x07, 0x02, 0x07, 0x00,
			0x24, 0x37, 0x10, 0x01, 0x01, 0x00, 0x00, 0x06,
			// Partial Parameter (for Partial #1)
			0x08, 0x01, 0x00, 0x01, 0x08, 0x06, 0x64, 0x32, 0x62, 0x29, 0x32, 0x32,
			0x40, 0x1e, 0x4c,
			0x19, 0x00, 0x07, 0x29, 0x0a,
			0x5c, 0x58, 0x00, 0x01, 0x01, 0x0f, 0x29, 0x3d, 0x59, 0x4f, 0x1f, 0x40, 0x28,
			0x5f, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c,
			0x01, 0x01, 0x00, 0x07, 0x0e, 0x54, 0x55, 0x64, 0x47, 0x53, 0x00,
			// Partial Parameter (for Partial #2)
			0x24, 0x2d, 0x10, 0x01, 0x00, 0x00, 0x55, 0x06,
			0x05, 0x01, 0x00, 0x01, 0x08, 0x06, 0x64, 0x32, 0x62, 0x29, 0x32, 0x32,
			0x3d, 0x1e, 0x46,
			0x19, 0x00, 0x07, 0x29, 0x0a,
			0x5c, 0x58, 0x00, 0x01, 0x01, 0x0f, 0x29, 0x3d, 0x59, 0x4f, 0x1f, 0x40, 0x28,
			0x5f, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c,
			0x01, 0x01, 0x00, 0x07, 0x0e, 0x54, 0x55, 0x64, 0x47, 0x53, 0x00,
			// Partial Parameter (for Partial #3)
			0x43, 0x32, 0x05, 0x01, 0x00, 0x69, 0x00, 0x07,
			0x08, 0x03, 0x00, 0x36, 0x36, 0x44, 0x4c, 0x5d, 0x57, 0x4d, 0x2d, 0x00,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x0b, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5f, 0x46, 0x7f, 0x00, 0x1b, 0x0c,
			0x00, 0x00, 0x00, 0x3f, 0x3d, 0x48, 0x4c, 0x64, 0x5e, 0x41, 0x00,
			// Partial Parameter (for Partial #4)
			0x43, 0x32, 0x05, 0x01, 0x00, 0x69, 0x00, 0x07,
			0x08, 0x03, 0x00, 0x36, 0x36, 0x44, 0x4c, 0x5d, 0x57, 0x4d, 0x2d, 0x00,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x0b, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5f, 0x46, 0x7f, 0x00, 0x1b, 0x0c,
			0x00, 0x00, 0x00, 0x3f, 0x3d, 0x48, 0x4c, 0x64, 0x5e, 0x41, 0x00,

			// [Timbre Temporary Area (Part 6)]
			// Common Parameter
			...'ElecPiano1'.split('').map((ch) => ch.charCodeAt()), 0x01, 0x00, 0x07, 0x00,
			// Partial Parameter (for Partial #1)
			0x24, 0x37, 0x0f, 0x01, 0x00, 0x00, 0x3c, 0x07,
			0x03, 0x00, 0x01, 0x0a, 0x07, 0x16, 0x00, 0x32, 0x42, 0x33, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x35, 0x00, 0x07, 0x16, 0x08,
			0x29, 0x28, 0x00, 0x02, 0x00, 0x20, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00,
			0x5a, 0x55, 0x5c, 0x0c, 0x59, 0x0c,
			0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x38, 0x64, 0x52, 0x28, 0x00,
			// Partial Parameter (for Partial #2)
			0x4e, 0x47, 0x07, 0x01, 0x00, 0x00, 0x21, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x1d, 0x01, 0x09, 0x61, 0x0a,
			0x64, 0x00, 0x00, 0x03, 0x00, 0x1a, 0x40, 0x4b, 0x1d, 0x64, 0x38, 0x14, 0x00,
			0x47, 0x3c, 0x33, 0x08, 0x5b, 0x0c,
			0x01, 0x01, 0x00, 0x28, 0x3d, 0x4a, 0x64, 0x64, 0x36, 0x23, 0x06,
			// Partial Parameter (for Partial #3)
			0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31,
			0x3e, 0x08, 0x42,
			0x37, 0x00, 0x07, 0x16, 0x09,
			0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00,
			0x5a, 0x55, 0x5c, 0x0c, 0x59, 0x0c,
			0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00,
			// Partial Parameter (for Partial #4)
			0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31,
			0x3e, 0x08, 0x42,
			0x37, 0x00, 0x07, 0x16, 0x09,
			0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00,
			0x5a, 0x55, 0x5c, 0x0c, 0x59, 0x0c,
			0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00,

			// [Timbre Temporary Area (Part 7)]
			// Common Parameter
			...'BottleBlow'.split('').map((ch) => ch.charCodeAt()), 0x05, 0x01, 0x0f, 0x00,
			// Partial Parameter (for Partial #1)
			0x21, 0x32, 0x10, 0x01, 0x00, 0x1c, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x55, 0x7b, 0x08, 0x20, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x64, 0x64, 0x64, 0x64,
			// Partial Parameter (for Partial #2)
			0x3c, 0x49, 0x07, 0x01, 0x00, 0x35, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x3f, 0x25, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x20, 0x46, 0x7d, 0x04, 0x1b, 0x0c,
			0x00, 0x00, 0x08, 0x18, 0x23, 0x28, 0x1a, 0x54, 0x5f, 0x56, 0x46,
			// Partial Parameter (for Partial #3)
			0x24, 0x32, 0x10, 0x01, 0x00, 0x00, 0x00, 0x07,
			0x06, 0x03, 0x01, 0x0e, 0x11, 0x30, 0x00, 0x42, 0x38, 0x32, 0x32, 0x32,
			0x3f, 0x19, 0x44,
			0x32, 0x18, 0x0c, 0x1d, 0x0b,
			0x2a, 0x43, 0x00, 0x00, 0x05, 0x15, 0x2c, 0x2d, 0x44, 0x11, 0x1d, 0x17, 0x0e,
			0x64, 0x44, 0x7f, 0x00, 0x1b, 0x0c,
			0x00, 0x00, 0x04, 0x08, 0x17, 0x22, 0x36, 0x57, 0x64, 0x5d, 0x64,
			// Partial Parameter (for Partial #4)
			0x43, 0x2d, 0x10, 0x01, 0x00, 0x00, 0x00, 0x07,
			0x05, 0x03, 0x01, 0x0d, 0x12, 0x22, 0x00, 0x3f, 0x37, 0x33, 0x32, 0x32,
			0x3f, 0x28, 0x00,
			0x2a, 0x16, 0x08, 0x64, 0x04,
			0x24, 0x37, 0x00, 0x00, 0x09, 0x25, 0x2b, 0x4e, 0x64, 0x42, 0x23, 0x17, 0x11,
			0x44, 0x3c, 0x67, 0x07, 0x1b, 0x0c,
			0x00, 0x00, 0x19, 0x0f, 0x19, 0x22, 0x26, 0x4f, 0x61, 0x5e, 0x64,

			// [Timbre Temporary Area (Part 8)]
			// Common Parameter
			...'Orche Hit '.split('').map((ch) => ch.charCodeAt()), 0x02, 0x08, 0x0f, 0x00,
			// Partial Parameter (for Partial #1)
			0x24, 0x32, 0x10, 0x01, 0x00, 0x2f, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x46, 0x1b, 0x0c, 0x67, 0x02,
			0x02, 0x00, 0x01, 0x2e, 0x2d, 0x1f, 0x4c, 0x64, 0x5d, 0x32, 0x00,
			// Partial Parameter (for Partial #2)
			0x18, 0x32, 0x10, 0x01, 0x01, 0x00, 0x64, 0x07,
			0x04, 0x00, 0x00, 0x0c, 0x13, 0x25, 0x00, 0x3d, 0x36, 0x32, 0x32, 0x32,
			0x39, 0x21, 0x43,
			0x3a, 0x00, 0x0a, 0x1e, 0x09,
			0x3e, 0x00, 0x00, 0x00, 0x08, 0x2f, 0x23, 0x2d, 0x29, 0x1e, 0x2a, 0x22, 0x05,
			0x3d, 0x49, 0x1b, 0x0c, 0x67, 0x02,
			0x01, 0x00, 0x14, 0x24, 0x2c, 0x22, 0x3e, 0x64, 0x61, 0x3f, 0x00,
			// Partial Parameter (for Partial #3)
			0x30, 0x32, 0x10, 0x01, 0x00, 0x17, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x46, 0x1b, 0x0c, 0x67, 0x02,
			0x02, 0x00, 0x00, 0x33, 0x2d, 0x19, 0x4c, 0x64, 0x5e, 0x32, 0x00,
			// Partial Parameter (for Partial #4)
			0x31, 0x48, 0x10, 0x01, 0x00, 0x2d, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x48, 0x1b, 0x0c, 0x67, 0x02,
			0x02, 0x00, 0x00, 0x33, 0x2d, 0x19, 0x4c, 0x64, 0x5e, 0x32, 0x00,
		],
		0x05: [
			// Patch Memory
			0x00, 0x00, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #1
			0x00, 0x01, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #2
			0x00, 0x02, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #3
			0x00, 0x03, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #4
			0x00, 0x04, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #5
			0x00, 0x05, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #6
			0x00, 0x06, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #7
			0x00, 0x07, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #8
			0x00, 0x08, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #9
			0x00, 0x09, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #10
			0x00, 0x0a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #11
			0x00, 0x0b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #12
			0x00, 0x0c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #13
			0x00, 0x0d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #14
			0x00, 0x0e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #15
			0x00, 0x0f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #16
			0x00, 0x10, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #17
			0x00, 0x11, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #18
			0x00, 0x12, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #19
			0x00, 0x13, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #20
			0x00, 0x14, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #21
			0x00, 0x15, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #22
			0x00, 0x16, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #23
			0x00, 0x17, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #24
			0x00, 0x18, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #25
			0x00, 0x19, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #26
			0x00, 0x1a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #27
			0x00, 0x1b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #28
			0x00, 0x1c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #29
			0x00, 0x1d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #30
			0x00, 0x1e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #31
			0x00, 0x1f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #32
			0x00, 0x20, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #33
			0x00, 0x21, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #34
			0x00, 0x22, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #35
			0x00, 0x23, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #36
			0x00, 0x24, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #37
			0x00, 0x25, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #38
			0x00, 0x26, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #39
			0x00, 0x27, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #40
			0x00, 0x28, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #41
			0x00, 0x29, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #42
			0x00, 0x2a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #43
			0x00, 0x2b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #44
			0x00, 0x2c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #45
			0x00, 0x2d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #46
			0x00, 0x2e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #47
			0x00, 0x2f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #48
			0x00, 0x30, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #49
			0x00, 0x31, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #50
			0x00, 0x32, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #51
			0x00, 0x33, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #52
			0x00, 0x34, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #53
			0x00, 0x35, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #54
			0x00, 0x36, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #55
			0x00, 0x37, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #56
			0x00, 0x38, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #57
			0x00, 0x39, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #58
			0x00, 0x3a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #59
			0x00, 0x3b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #60
			0x00, 0x3c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #61
			0x00, 0x3d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #62
			0x00, 0x3e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #63
			0x00, 0x3f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #64
			0x01, 0x00, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #65
			0x01, 0x01, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #66
			0x01, 0x02, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #67
			0x01, 0x03, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #68
			0x01, 0x04, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #69
			0x01, 0x05, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #70
			0x01, 0x06, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #71
			0x01, 0x07, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #72
			0x01, 0x08, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #73
			0x01, 0x09, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #74
			0x01, 0x0a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #75
			0x01, 0x0b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #76
			0x01, 0x0c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #77
			0x01, 0x0d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #78
			0x01, 0x0e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #79
			0x01, 0x0f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #80
			0x01, 0x10, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #81
			0x01, 0x11, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #82
			0x01, 0x12, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #83
			0x01, 0x13, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #84
			0x01, 0x14, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #85
			0x01, 0x15, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #86
			0x01, 0x16, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #87
			0x01, 0x17, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #88
			0x01, 0x18, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #89
			0x01, 0x19, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #90
			0x01, 0x1a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #91
			0x01, 0x1b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #92
			0x01, 0x1c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #93
			0x01, 0x1d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #94
			0x01, 0x1e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #95
			0x01, 0x1f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #96
			0x01, 0x20, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #97
			0x01, 0x21, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #98
			0x01, 0x22, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #99
			0x01, 0x23, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #100
			0x01, 0x24, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #101
			0x01, 0x25, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #102
			0x01, 0x26, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #103
			0x01, 0x27, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #104
			0x01, 0x28, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #105
			0x01, 0x29, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #106
			0x01, 0x2a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #107
			0x01, 0x2b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #108
			0x01, 0x2c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #109
			0x01, 0x2d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #110
			0x01, 0x2e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #111
			0x01, 0x2f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #112
			0x01, 0x30, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #113
			0x01, 0x31, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #114
			0x01, 0x32, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #115
			0x01, 0x33, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #116
			0x01, 0x34, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #117
			0x01, 0x35, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #118
			0x01, 0x36, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #119
			0x01, 0x37, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #120
			0x01, 0x38, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #121
			0x01, 0x39, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #122
			0x01, 0x3a, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #123
			0x01, 0x3b, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #124
			0x01, 0x3c, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #125
			0x01, 0x3d, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #126
			0x01, 0x3e, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #127
			0x01, 0x3f, 0x18, 0x32, 0x0c, 0x00, 0x01, 0x00,	// Patch Memory #128
		],
		0x08: [
			// Timbre Memory
			...[...new Array(64)].reduce((p, _) => {
				p.push(...new Array(10).fill(-1), ...new Array(4 + 58 * 4 + 10).fill(0x00));
				return p;
			}, []),
		],
		0x10: [
			// System Area
			0x4a,
			0x00, 0x05, 0x03,
			0x03, 0x0a, 0x06, 0x04, 0x03, 0x00, 0x00, 0x00, 0x06,
			0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
			0x64, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
		],
	},
	0x42: {
		0x48: [],
		0x49: [],
	},
};

export function isSysExRedundant(bytes) {
	// Checks the argument.
	if (!bytes || !bytes.length || bytes[0] !== 0xf0 || bytes[bytes.length - 1] !== 0xf7) {
		throw new Error('Invalid argument');
	}

	// Checks whether the length of the SysEx is enough.
	if (bytes.length <= 10) {
		return false;
	}

	// Parses the SysEx.
	const [f0, mfrId, deviceId, modelId, command, addrH, addrM, addrL, ...payload] = bytes;
	const f7 = payload.pop();
	const sum = payload.pop();
	console.assert(f0 === 0xf0 && f7 === 0xf7);

	// Checks whether the SysEx is DT1 for Roland.
	if (mfrId !== 0x41 || deviceId !== 0x10 || command !== 0x12) {
		return false;
	}
	if ([addrH, addrM, addrL].some((e) => (e < 0x00 || 0x80 <= e))) {
		return false;
	}

	// If the check sum is invalid, it can be ignored.
	if (sum !== checkSum(bytes.slice(5, -2))) {
		return true;
	}

	// Gets the table corresponding to the model ID and the addresses.
	const table = initialValues[modelId];
	if (!table) {
		return false;
	}
	const page = table[addrH];
	if (!page) {
		return false;
	}

	// Gets the initial values.
	const index = (addrM << 7) | addrL;
	const values = page.slice(index, index + payload.length);
	if (payload.length !== values.length) {
		return false;
	}

	// Checks all the payload data is same to the initial value or it's "don't care".
	if (payload.some((e, i) => (e !== values[i] && values[i] >= 0))) {
		return false;
	}

	return true;
}
